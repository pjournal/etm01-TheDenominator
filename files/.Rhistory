library(DMwR2)
getwd()
data <- read.csv("projetrain.csv")
data = data[,-1]
install.packages("Rcpp")
data <- read.csv("projetrain.csv")
data = data[,-1]
CC=complete.cases(data)
sum(CC)
str(data)
fix(data)
summary(data
data <- read.csv("projetrainNA.csv")
data = data[,-1]
OM=na.omit(data)
library(caTools)
split = sample.split(OM$Happy, SplitRatio=0.7)
OM.train = OM[split==TRUE, ]
OM.test = OM[split==FALSE, ]
str(OM.train)
library(e1071)
install.packages("e1071")
library(e1071)
OM.NB=naiveBayes(Happy ~., data = OM.train)
OM.NB
Pred.OM.NB=predict(NB,newdata=OM.test,type="raw")
FTH=Pred.OM.NB[,2]
FTH01 <- ifelse(FTH > 0.5, 1, 0)
table(FTH01, OM.test$Happy)
(63+39)/(63+39+25+21)
##2nd Model GLM
OM.train.2 = OM.train
OM.test.2 = OM.test
OM.train.2$Happy = as.numeric(OM.train$Happy)
OM.test.2$Happy <- as.numeric(OM.test$Happy)
fix(OM.test.2)
OM.GLM <- glm(Happy ~ ., data = OM.train.2, family = binomial)
Pred.OM.GLM = predict(OM.GLM, newdata = OM.test.2, type = 'response')
FTH02 = ifelse(Pred.OM.GLM > 0.5, 1, 0)
table(FTH02, OM.test.2$Happy)
(32+53)/(32+53+35+28)
table(FTH01, OM.test$Happy)
FTH01 <- ifelse(FTH > 0.5, 1, 0)
FTH=Pred.OM.NB[,2]
Pred.OM.NB=predict(NB,newdata=OM.test,type="raw")
Pred.OM.NB=predict(NB,newdata=OM.test,type="raw")
OM.NB=naiveBayes(Happy ~., data = OM.train)
OM.NB
Pred.OM.NB=predict(NB,newdata=OM.test,type="raw")
Pred.OM.NB=predict(OM.NB,newdata=OM.test,type="raw")
OM.NB=naiveBayes(Happy ~., data = OM.train)
OM.NB
Pred.OM.NB=predict(OM.NB,newdata=OM.test,type="raw")
FTH=Pred.OM.NB[,2]
FTH01 <- ifelse(FTH > 0.5, 1, 0)
table(FTH01, OM.test$Happy)
OM=na.omit(data)
summary(OM)
str(OM)
data <- read.csv("projetrain.csv")
data = data[,-1]
install.packages("DMwR2")
library(DMwR2)
CC=complete.cases(data)
sum(CC)
str(data)
summary(data
data <- read.csv("projetrainNA.csv")
data = data[,-1]
OM=na.omit(data)
summary(OM)
str(OM)
library(caTools)
split = sample.split(OM$Happy, SplitRatio=0.7)
OM.train = OM[split==TRUE, ]
OM.test = OM[split==FALSE, ]
str(OM.train)
##1st Model Naive Bayes
install.packages("e1071")
library(e1071)
OM.NB=naiveBayes(Happy ~., data = OM.train)
OM.NB
Pred.OM.NB=predict(OM.NB,newdata=OM.test,type="raw")
FTH=Pred.OM.NB[,2]
FTH01 <- ifelse(FTH > 0.5, 1, 0)
table(FTH01, OM.test$Happy)
(63+39)/(63+39+25+21)
str(OM.train)
OM=na.omit(data)
summary(OM)
str(OM)
data <- read.csv("projetrain.csv")
data = data[,-1]
library(DMwR2)
CC=complete.cases(data)
sum(CC)
data <- read.csv("projetrainNA.csv")
data = data[,-1]
OM=na.omit(data)
summary(OM)
str(OM)
fix(OM)
split = sample.split(OM$Happy, SplitRatio=0.7)
OM.train = OM[split==TRUE, ]
OM.test = OM[split==FALSE, ]
str(OM.train)
OM.NB=naiveBayes(Happy ~., data = OM.train)
OM.NB
Pred.OM.NB=predict(OM.NB,newdata=OM.test,type="raw")
FTH=Pred.OM.NB[,2]
FTH01 <- ifelse(FTH > 0.5, 1, 0)
table(FTH01, OM.test$Happy)
set.seed(100)
Pred.OM.NB=predict(OM.NB,newdata=OM.test,type="raw")
set.seed(100)
split = sample.split(OM$Happy, SplitRatio=0.7)
OM.train = OM[split==TRUE, ]
OM.test = OM[split==FALSE, ]
OM.NB=naiveBayes(Happy ~., data = OM.train)
OM.NB
Pred.OM.NB=predict(OM.NB,newdata=OM.test,type="raw")
FTH=Pred.OM.NB[,2]
FTH01 <- ifelse(FTH > 0.5, 1, 0)
table(FTH01, OM.test$Happy)
(66+45)/(66+45+15+22)
OM.train.2 = OM.train
OM.test.2 = OM.test
OM.train.2$Happy = as.numeric(OM.train$Happy)
OM.test.2$Happy <- as.numeric(OM.test$Happy)
fix(OM.test.2)
OM.GLM <- glm(Happy ~ ., data = OM.train.2, family = binomial)
Pred.OM.GLM = predict(OM.GLM, newdata = OM.test.2, type = 'response')
FTH02 = ifelse(Pred.OM.GLM > 0.5, 1, 0)
table(FTH02, OM.test.2$Happy)
(37+58)/(37+58+30+23)
library(randomForest)
OM.train.3 = OM.train
OM.test.3 = OM.test
OM.train.3$Happy <- as.factor(OM.train$Happy)
OM.test.3$Happy <- as.factor(OM.test$Happy)
OM.RF <- randomForest(Happy ~ ., data = OM.train.3, ntrees=100)
Pred.OM.RF <- predict(OM.RF, newdata = OM.test.3, type = 'prob')[ , 2]
FTH03 <- ifelse(Pred.OM.RF > 0.5, 1, 0)
table(FTH03, OM.test.2$Happy)
(78+29)/(78+29+31+10)
data.test.raw <- read.csv("projetest.csv")
data.test <- read.csv("projetest.csv")
CC.test=complete.cases(data.test)
str(data.test)
sum(CC.test)
fix(data.test)
data.test <- read.csv("projetestNA.csv")
data.test = data.test[,-1]
OM.test=na.omit(data.test)
knnImputation <- function(data,k=10,scale=T,meth='weighAvg',distData=NULL) {
n <- nrow(data)
if (!is.null(distData)) {
distInit <- n+1
data <- rbind(data,distData)
} else distInit <- 1
N <- nrow(data)
ncol <- ncol(data)
nomAttrs <- rep(F,ncol)
for(i in seq(ncol)) nomAttrs[i] <- is.factor(data[,i])
nomAttrs <- which(nomAttrs)
hasNom <- length(nomAttrs)
contAttrs <- setdiff(seq(ncol),nomAttrs)
dm <- data
if (scale) dm[,contAttrs] <- scale(dm[,contAttrs])
if (hasNom)
for(i in nomAttrs) dm[,i] <- as.integer(dm[,i])
dm <- as.matrix(dm)
nas <- which(!complete.cases(dm))
if (!is.null(distData)) tgt.nas <- nas[nas <= n]
else tgt.nas <- nas
if (length(tgt.nas) == 0)
warning("No case has missing values. Stopping as there is nothing to do.")
xcomplete <- dm[setdiff(distInit:N,nas),]
if (nrow(xcomplete) < k)
stop("Not sufficient complete cases for computing neighbors.")
for (i in tgt.nas) {
tgtAs <- which(is.na(dm[i,]))
dist <- scale(xcomplete,dm[i,],FALSE)
xnom <- setdiff(nomAttrs,tgtAs)
if (length(xnom)) dist[,xnom] <-ifelse(dist[,xnom]>0,1,dist[,xnom])
dist <- dist[,-tgtAs]
dist <- sqrt(drop(dist^2 %*% rep(1,ncol(dist))))
ks <- order(dist)[seq(k)]
for(j in tgtAs)
if (meth == 'median')
data[i,j] <- centralValue(data[setdiff(distInit:N,nas),j][ks])
else
data[i,j] <- centralValue(data[setdiff(distInit:N,nas),j][ks],exp(-dist[ks]))
}
data[1:n,]
}
library(DMwR2)
data.test.kNN = knnImputation(data.test,k=10)
Pred.Test.NB =predict(OM.NB,newdata=data.test.kNN,type="raw")
FTH04 = Pred.Test.NB[,2]
FTH04 = ifelse(FTH04 > 0.5, 1, 0)
Pred.Test.GLM = predict(OM.GLM, newdata = data.test.kNN, type = 'response')
FTH05 = ifelse(Pred.Test.GLM > 0.5, 1, 0)
Pred.Test.RF <- predict(OM.RF, newdata = data.test.kNN, type = 'prob')[ , 2]
FTH06 <- ifelse(Pred.Test.RF > 0.5, 1, 0)
ID=data.test.raw[,1]
MySubmission1 = data.frame(UserID = ID, Probability= FTH04)
write.csv(MySubmission1, "submission1.csv", row.names=FALSE)
MySubmission2 = data.frame(UserID = ID, Probability= FTH05)
write.csv(MySubmission1, "submission2.csv", row.names=FALSE)
MySubmission3 = data.frame(UserID = ID, Probability= FTH06)
write.csv(MySubmission1, "submission3.csv", row.names=FALSE)
library(mice)
data.train.H <- subset(train.test, select=Happy)
data.train.H <- subset(data.train, select=Happy)
data.train.H <- subset(data, select=Happy)
CC.train.H=complete.cases(data)
CC.train.H
sum(CC.train.H)
CC.train.H=!complete.cases(data)
sum(CC.train.H)
fix(data)
q()
5+3*2
sqrt(4)
variable = 5+3*2
isim = 'fatih'
isim = "fatih"
array = (3,5,7,8,1,2,3,5,6,0)
array = c(3,5,7,8,1,2,3,5,6,0)
array_char = c(2,3,5,"2")
array_char = c(2,3,5,"2",2,1)
is.character(isim)
is.character(array_char)
is.character(array)
as.numeric(array_char)
array = c(array_char, "fatih")
num_array = asnumeric(array_char)
num_array = asnumeric(array_char)
num_array = as.numeric(array_char)
num_array
array_char = c(array_char, "fatih")
num_array = as.numeric(array_char)
num_array
num_aray[1]
num_array[1]
#3 ile 5 arasına git
num_array[3:5]
#1. eleman hariç gersiin al
num_array[-1]
#ilk 3 elemanı at
num_array [-1:-3]
#3 ve 5. elemanları at
num_array = [c(-3,-5)]
#3 ve 5. elemanları at
num_array = [c(-3,-5)]
#3 ve 5. elemanları at
num_array [c(-3,-5)]
length(num_array)
num_array [-length(num_array)]
#besten buyuk elemanları bul
numaray>5
#besten buyuk elemanları bul
num_array>5
#ucten buyuk elemanları bul
num_array>3
num_array[num_array>3]
#hangi sırada
which(num_array>3)
variable = 5+3*2
isim = "fatih"
array = c(3,5,7,8,1,2,3,5,6,0)
array_char = c(2,3,5,"2",2,1)
is.character(isim)
is.character(array_char)
is.character(array)
as.numeric(array_char)
array_char = c(array_char, "fatih")
num_array = as.numeric(array_char)
num_array
#1. elemana git
num_array[1]
#3 ile 5 arasına git
num_array[3:5]
#1. eleman hariç gersiin al
num_array[-1]
#ilk 3 elemanı at
num_array [-1:-3]
#3 ve 5. elemanları at
num_array [c(-3,-5)]
length(num_array)
num_array [-length(num_array)]
#ucten buyuk elemanları bul
num_array>3
num_array[num_array>3]
#hangi sırada
which(num_array>3)
variable = 5+3*2
isim = "fatih"
array = c(3,5,7,8,1,2,3,5,6,0)
array_char = c(2,3,5,"2",2,1)
is.character(isim)
is.character(array_char)
is.character(array)
as.numeric(array_char)
array_char = c(array_char, "fatih")
num_array = as.numeric(array_char)
num_array
#1. elemana git
num_array[1]
#3 ile 5 arasına git
num_array[3:5]
#1. eleman hariç gersiin al
num_array[-1]
#ilk 3 elemanı at
num_array [-1:-3]
#3 ve 5. elemanları at
num_array [c(-3,-5)]
length(num_array)
num_array [-length(num_array)]
#ucten buyuk elemanları bul
num_array>3
num_array[num_array>3]
#hangi sırada
which(num_array>3)
source('~/ETM58D_Lecture3.R')
#matrisler
samplematrix = matrix(4,5)
#matrisler
samplematrix = matrix(0,4,5)
#matrisler
samplematrix = matrix(0,5,4)
view(samplematrix)
View(samplematrix)
?Matrix
?matrix
#farklı sırada argumanlar
samplematrix2 = (nrow=6, ncol=3, data=NA)
#farklı sırada argumanlar
samplematrix2 = (nrow=6,ncol=3,data=NA)
#farklı sırada argumanlar
samplematrix2 = matrix(nrow=6,ncol=3,data=NA)
#0 ile 1 arası rastgele sayı üretmek için
#random number generation from uniform distrbution
rastgele = runif(100,0,1)
#farklı sırada argumanlar
samplematrix2 = matrix(nrow=10,ncol=3,data=NA)
#0 ile 1 arası rastgele sayı üretmek için
#random number generation from uniform distrbution
rastgele = runif(30)
rastgele
samplematrix3 = matrix(nrow=10,ncol=3,data=rastgele)
samplematrix3 = matrix(nrow=10,ncol=3,data=rastgele)
#ilk once sutunları doldurur R
#eksik verseydik dolduracaktı
samplematrix3
#1. satır 3 sütuna git
samplematrix3[1,3]
#full 2.satırı görmek istersek
samplematrix3[2,]
samplematrix3 [,-2]
#ilk 5 satırı al
samplematrix3[1:5,]
#ilk 5 satırı alırken, son 2 sütunu al
samplematrix3[1:5,2:3]
samplematrix3[1:5, -1]
#ilk sütunun 0.3'ten buyuk olan satırlarını goster
samplematrix3[samplematrix3[,1>0.2,]]
#ilk sütunun 0.3'ten buyuk olan satırlarını goster
samplematrix3[samplematrix3[,1>0.2,]
#ilk sütunun 0.3'ten buyuk olan satırlarını goster
samplematrix3[samplematrix3[,1>0.2,]
#ilk sütunun 0.3'ten buyuk olan satırlarını goster
samplematrix3[samplematrix3[,1>0.2,]]
#ilk sütunun 0.3'ten buyuk olan satırlarını goster
samplematrix3[samplematrix3[[,1]>0.2,]]
#ilk sütunun 0.3'ten buyuk olan satırlarını goster
samplematrix3[samplematrix3[,1]>0.3
#ilk sütunun 0.3'ten buyuk olan satırlarını goster
samplematrix3[samplematrix3[,1]>0.3]
#ilk sütunun 0.3'ten buyuk olan satırlarını goster
samplematrix3[samplematrix3[,1]>0.3]
#ilk sütunun 0.3'ten buyuk olan satırlarını goster
samplematrix3[samplematrix3[,1]>0.3,]
##yapamadım amk
truefalse = samplematrix3[,1]>0.2
truefalseind = which(truefalse)
samplematrix3[truefalse,]
samplematrix3[truefalseind,]
#data.frame
Yas = sample(1:100,20)
Sehir = sample(c('Ankara', 'Istanbul', 'Izmir', 'Adana'))
Sehir = sample(c('Ankara', 'Istanbul', 'Izmir'), 20, replae = T)
Sehir = sample(c('Ankara', 'Istanbul', 'Izmir'), 20, replace = T)
sampledataframe=data.frame()
Sehir = sample(c('Ankara', 'Istanbul', 'Diger'), 20, replace = T)
sampledataframe=data.frame()
sampledataframe=data.frame(yas=Yas, sehir=Sehir)
View(sampledataframe)
sampledataframe[1,]
set.seed(1)
Yas = sample(1:100,20)
Sehir = sample(c('Ankara', 'Istanbul', 'Diger'), 20, replace = T)
sampledataframe=data.frame(yas=Yas, sehir=Sehir)
View(sampledataframe)
set.seed(5)
Yas = sample(1:100,20)
Sehir = sample(c('Ankara', 'Istanbul', 'Diger'), 20, replace = T)
sampledataframe=data.frame(yas=Yas, sehir=Sehir)
View(sampledataframe)
#5. satırdaki yas
sampledataframe[5,1]
sampledataframe$yas
sampledataframe$sehir
sampledataframe$yas[5]
#5. elemanın yas hanesini degistir
sampledataframe$yas[5] = 35
View(sampledataframe)
#ratele bir dizi yarat
rastgele=runif(1000)
rastgele
which(rastgele<0.5)
sum(which(rastgele<0.5))
sum(rastgele<0.5)
#0.5ten kucuk kac deger var
sum(rastgele<0.5)
#ratele bir dizi yarat
rastgele=runif(1000)
rastgele
#0.5ten kucuk kac deger var
sum(rastgele<0.5)
rastgele=runif(1000)
rastgele
#0.5ten kucuk kac deger var
sum(rastgele<0.5)
rastgele=runif(1000)
rastgele
#0.5ten kucuk kac deger var
sum(rastgele<0.5)
for(i in 1:5){
print(i)
}
print(i^2)
for(i in 1:5){
print(i^2)
}
for(i in 1:5){
print(rastgele[i])
}
kucukcount = 0
for (i in 1:length(rastgele)){
if(rastgele[i]<0.5){
kucukcount = kucukcount + 1
print ("kucuk")
}
else {
print('buyuk')
}
}
kucukcount
print(kucukcount)
toplam_kucuk=sum(rastgele>0.5)
print(toplam_kucuk)
number_points<-1000
x<-runif(number_points,-1,1)
y<-runif(number_points,-1,1)
points<-data.frame(cbind(x,y))
points$unit_circle<-points$x^2 + points$y^2
4*length(points$unit_circle[points$unit_circle<1]) / number_points
noktasayisi = 1000
kare = matrix(runif(noktaayisi*2,-1,1),ncol=2)
kare = matrix(runif(noktasayisi*2,-1,1),ncol=2)
origineuzaklik=sqrt(kare[,1]^2+kare[,2]^2)
plot(kare)
origineuzaklik
plot(kare, col=(origineuzaklik<=1))
plot(kare, col=(origineuzaklik<=1)+1)
noktasayisi = 100000
kare = matrix(runif(noktasayisi*2,-1,1),ncol=2)
plot(kare)
origineuzaklik=sqrt(kare[,1]^2+kare[,2]^2)
origineuzaklik
plot(kare, col=(origineuzaklik<=1)+1)
tahmini_pi = (origineuzaklik<=1)/(noktasayisi)
tahmini_pi
tahmini_pi = 4*sum(origineuzaklik<=1)/(noktasayisi)
tahmini_pi
pi
$HOME/.pandoc
require(knitr)
install.packages('data.table')
require(data.table)
setwd("C:\Users\Beach\Documents\GitHub\etm01-TheDenominator\files")
setwd("C:\Users\Beach\Documents\GitHub\etm01-TheDenominator\files")
setwd("C:/Users/Beach/Documents/GitHub/etm01-TheDenominator/files")
require(knitr)
install.packages('data.table')
install.packages("data.table")
setwd("C:/Users/Beach/Documents/GitHub/etm01-TheDenominator/files")
getwd()
# read matches info
matches=readRDS('df9b1196-e3cf-4cc7-9159-f236fe738215_matches.rds')
